pipeline {
    agent any
    
    tools {
        nodejs 'Node_JS'   
    }
    
    environment {
        DOCKER_BUILDKIT = '1'
        APP_NAME = 'naila-arts'
        DOCKER_IMAGE_FRONTEND = "${APP_NAME}:frontend-${BUILD_NUMBER}"
        DOCKER_IMAGE_BACKEND = "${APP_NAME}:backend-${BUILD_NUMBER}"
        HUB_REPOSITORY = 'naila-arts'
        HUB_USERNAME = 'harisdux'
        VPS_IP = '31.220.109.115'
    }
    
    stages {
        stage('Verify Prerequisites') {
            steps {
                script {
                    // Check Docker installation and permissions
                    sh '''                     
                        
                        # Ensure Docker daemon is running
                        if ! docker info >/dev/null 2>&1; then
                            echo "Docker daemon is not running. Please start Docker service."
                            exit 1
                        fi
                        
                        # Display versions for logging
                        echo "Docker version:"
                        docker --version
                        
                        echo "Node version:"
                        node --version
                        
                        echo "NPM version:"
                        npm --version
                    '''
                }
            }
        }

        stage('Set Environment') {
            steps {
                script {
                    // Dynamically set environment based on the branch
                    if (env.BRANCH_NAME == 'main') {
                        echo "Branch name: ${env.BRANCH_NAME}"
                         env.ENVIRONMENT = 'production'
                    } else if (env.BRANCH_NAME == 'develop') {
                        echo "Branch name: ${env.BRANCH_NAME}"
                         env.ENVIRONMENT = 'develop'
                    } else {
                        error "Unrecognized branch: ${env.BRANCH_NAME}. Only 'develop' and 'main' are supported."
                    }
                    echo "Building for ${env.ENVIRONMENT} environment."
                }
            }
        }
        
        
       stage('Docker Build & Deploy') {
          steps {
        script {
          
            withCredentials([string(credentialsId: 'DOCKERHUB_TOKEN', variable: 'DOCKERHUB_PAT')]) {
                sh """
                    echo "Logging into Docker Hub"
                    echo '${DOCKERHUB_PAT}' | docker login -u ${HUB_USERNAME} --password-stdin

                       echo "Building frontend image"
                            docker build -t ${HUB_USERNAME}/${DOCKER_IMAGE_FRONTEND} -f frontend/Dockerfile frontend
                                # Push the frontend-image
                            docker push  ${HUB_USERNAME}/${DOCKER_IMAGE_FRONTEND}
                            
                        echo "Building backend image"
                            docker build -t ${HUB_USERNAME}/${DOCKER_IMAGE_BACKEND} -f backend/Dockerfile backend
                                # Push the backend-image
                            docker push  ${HUB_USERNAME}/${DOCKER_IMAGE_BACKEND}
                """
            }

        }
    }
}

stage('Deploy to VPS') {
    steps {
        script {
            withCredentials([
                usernamePassword(credentialsId: 'VPS_CREDENTIALS', usernameVariable: 'VPS_USER', passwordVariable: 'VPS_PASS'),
                string(credentialsId: 'DOCKERHUB_TOKEN', variable: 'DOCKERHUB_PAT')
            ]) {
                sh """
                    sshpass -p "${VPS_PASS}" ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_IP} <<EOF
                        echo '${DOCKERHUB_PAT}' | docker login -u ${HUB_USERNAME} --password-stdin
                        
                        echo "Pulling latest frontend image"
                        docker pull ${HUB_USERNAME}/${DOCKER_IMAGE_FRONTEND}
                        
                        echo "Pulling latest backend image"
                        docker pull ${HUB_USERNAME}/${DOCKER_IMAGE_BACKEND}

                        echo "Stopping old containers"
                        docker stop naila-frontend || true
                        docker rm naila-frontend || true
                        docker stop naila-backend || true
                        docker rm naila-backend || true

                        echo "Running new containers"
                        docker run -d --name naila-frontend -p 3000:80 ${HUB_USERNAME}/${DOCKER_IMAGE_FRONTEND}
                        docker run -d --name naila-backend -p 5000:5000 ${HUB_USERNAME}/${DOCKER_IMAGE_BACKEND}

                        echo "Restarting Nginx"
                        systemctl restart nginx
                    
                """
            }
        }
    }
}




    }
    
    post {
        always {
            // Clean workspace
            cleanWs()
        }
        success {
            script {
                sh """
                    echo "Deployment successful!"                 
                """
            }
        }
        failure {
            script {
                sh """
                    echo "Deployment failed!"
                """
            }
        }
    }
}